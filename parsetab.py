
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULOleftEQUALNOTEQLARGESMALLLRGEQSMLEQCOLON COMMA DIVIDE ELIF ELSE EQUAL EQUALS FALSE FLOAT FOR IF IN INT LARGE LCPAREN LPAREN LRGEQ MINUS MODULO NAME NOTEQ PLUS PRINTF RCPAREN RPAREN SEMICOLON SMALL SMLEQ STRING TIMES TRUE WHILE\n    calc : statement\n    \n    statement : expression\n              | conditions\n              | loops\n              | var_assign\n    \n    loops : WHILE expression COLON statements\n    \n    loops : WHILE LPAREN expression RPAREN COLON statements\n    \n    loops : FOR expression COLON\n    \n    statements : statement\n               | statement statements\n    \n    conditions : IF expression COLON statements\n    \n    conditions : IF LPAREN expression RPAREN COLON statements\n    \n    conditions : IF expression COLON statements ELSE COLON statements\n    \n    conditions : IF LPAREN expression RPAREN COLON statements ELSE COLON statements\n    \n    conditions : IF expression COLON statements ELIF expression COLON statements ELSE COLON statements\n    \n    conditions : IF LPAREN expression RPAREN COLON statements ELIF LPAREN expression RPAREN COLON statements ELSE COLON statements\n    \n    var_assign : NAME EQUALS expression\n    \n    expression : PRINTF LPAREN expressions RPAREN SEMICOLON\n    \n    expressions : expression\n                | expression COMMA expressions\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression EQUAL expression\n               | expression NOTEQ expression\n               | expression LARGE expression\n               | expression SMALL expression\n               | expression LRGEQ expression\n               | expression SMLEQ expression\n               \n    \n    expression : INT\n               | FLOAT\n               | STRING\n               | TRUE\n               | FALSE\n    \n    expression : NAME\n    '
    
_lr_action_items = {'PRINTF':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[7,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-37,7,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,7,7,-8,7,-11,7,-6,-18,7,-10,7,7,7,-12,-7,-13,7,7,7,-14,7,-15,7,7,-16,]),'INT':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[8,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-37,8,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,8,8,-8,8,-11,8,-6,-18,8,-10,8,8,8,-12,-7,-13,8,8,8,-14,8,-15,8,8,-16,]),'FLOAT':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[9,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-37,9,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,9,9,-8,9,-11,9,-6,-18,9,-10,9,9,9,-12,-7,-13,9,9,9,-14,9,-15,9,9,-16,]),'STRING':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[10,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-37,10,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,10,10,-8,10,-11,10,-6,-18,10,-10,10,10,10,-12,-7,-13,10,10,10,-14,10,-15,10,10,-16,]),'TRUE':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[11,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-37,11,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,11,11,-8,11,-11,11,-6,-18,11,-10,11,11,11,-12,-7,-13,11,11,11,-14,11,-15,11,11,-16,]),'FALSE':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[12,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-37,12,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,12,12,-8,12,-11,12,-6,-18,12,-10,12,12,12,-12,-7,-13,12,12,12,-14,12,-15,12,12,-16,]),'NAME':([0,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,56,57,58,60,62,65,66,67,68,69,71,72,73,74,78,79,81,83,85,86,89,90,],[13,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-37,32,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,13,13,-8,32,-11,13,-6,-18,32,-10,13,13,13,-12,-7,-13,13,13,32,-14,13,-15,13,13,-16,]),'IF':([0,3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,57,58,60,62,66,67,68,69,71,72,73,74,78,81,83,85,86,89,90,],[14,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,14,14,-8,-11,14,-6,-18,-10,14,14,14,-12,-7,-13,14,14,-14,14,-15,14,14,-16,]),'WHILE':([0,3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,57,58,60,62,66,67,68,69,71,72,73,74,78,81,83,85,86,89,90,],[15,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,15,15,-8,-11,15,-6,-18,-10,15,15,15,-12,-7,-13,15,15,-14,15,-15,15,15,-16,]),'FOR':([0,3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,50,52,54,57,58,60,62,66,67,68,69,71,72,73,74,78,81,83,85,86,89,90,],[16,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,16,16,-8,-11,16,-6,-18,-10,16,16,16,-12,-7,-13,16,16,-14,16,-15,16,16,-16,]),'$end':([1,2,3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,54,57,58,60,62,66,71,72,73,81,85,90,],[0,-1,-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,-8,-11,-9,-6,-18,-10,-12,-7,-13,-14,-15,-16,]),'ELSE':([3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,54,57,58,60,62,66,71,72,73,77,81,85,87,90,],[-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,-8,64,-9,-6,-18,-10,75,-7,-13,80,-14,-15,88,-16,]),'ELIF':([3,4,5,6,8,9,10,11,12,13,32,36,37,38,39,40,41,42,43,44,45,46,49,54,57,58,60,62,66,71,72,73,81,85,90,],[-2,-3,-4,-5,-32,-33,-34,-35,-36,-37,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-17,-8,65,-9,-6,-18,-10,76,-7,-13,-14,-15,-16,]),'PLUS':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[17,-32,-33,-34,-35,-36,-37,17,-37,17,17,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,17,17,17,17,-18,17,17,]),'MINUS':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[18,-32,-33,-34,-35,-36,-37,18,-37,18,18,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,18,18,18,18,-18,18,18,]),'TIMES':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[19,-32,-33,-34,-35,-36,-37,19,-37,19,19,19,19,-23,-24,-25,-26,-27,-28,-29,-30,-31,19,19,19,19,-18,19,19,]),'DIVIDE':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[20,-32,-33,-34,-35,-36,-37,20,-37,20,20,20,20,-23,-24,-25,-26,-27,-28,-29,-30,-31,20,20,20,20,-18,20,20,]),'MODULO':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[21,-32,-33,-34,-35,-36,-37,21,-37,21,21,21,21,-23,-24,-25,-26,-27,-28,-29,-30,-31,21,21,21,21,-18,21,21,]),'EQUAL':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[22,-32,-33,-34,-35,-36,-37,22,-37,22,22,22,22,22,22,22,-26,-27,-28,-29,-30,-31,22,22,22,22,-18,22,22,]),'NOTEQ':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[23,-32,-33,-34,-35,-36,-37,23,-37,23,23,23,23,23,23,23,-26,-27,-28,-29,-30,-31,23,23,23,23,-18,23,23,]),'LARGE':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[24,-32,-33,-34,-35,-36,-37,24,-37,24,24,24,24,24,24,24,-26,-27,-28,-29,-30,-31,24,24,24,24,-18,24,24,]),'SMALL':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[25,-32,-33,-34,-35,-36,-37,25,-37,25,25,25,25,25,25,25,-26,-27,-28,-29,-30,-31,25,25,25,25,-18,25,25,]),'LRGEQ':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[26,-32,-33,-34,-35,-36,-37,26,-37,26,26,26,26,26,26,26,-26,-27,-28,-29,-30,-31,26,26,26,26,-18,26,26,]),'SMLEQ':([3,8,9,10,11,12,13,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,62,70,82,],[27,-32,-33,-34,-35,-36,-37,27,-37,27,27,27,27,27,27,27,-26,-27,-28,-29,-30,-31,27,27,27,27,-18,27,27,]),'LPAREN':([7,14,15,76,],[28,31,34,79,]),'COLON':([8,9,10,11,12,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,59,61,62,64,70,75,80,84,88,],[-32,-33,-34,-35,-36,50,-37,52,54,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,67,68,-18,69,74,78,83,86,89,]),'COMMA':([8,9,10,11,12,32,36,37,38,39,40,41,42,43,44,45,46,48,62,],[-32,-33,-34,-35,-36,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,56,-18,]),'RPAREN':([8,9,10,11,12,32,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,62,63,82,],[-32,-33,-34,-35,-36,-37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,55,-19,59,61,-18,-20,84,]),'EQUALS':([13,],[29,]),'SEMICOLON':([55,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'statement':([0,50,52,58,67,68,69,74,78,83,86,89,],[2,58,58,58,58,58,58,58,58,58,58,58,]),'expression':([0,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,34,50,52,56,58,65,67,68,69,74,78,79,83,86,89,],[3,30,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,51,53,3,3,48,3,70,3,3,3,3,3,82,3,3,3,]),'conditions':([0,50,52,58,67,68,69,74,78,83,86,89,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'loops':([0,50,52,58,67,68,69,74,78,83,86,89,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'var_assign':([0,50,52,58,67,68,69,74,78,83,86,89,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'expressions':([28,56,],[47,63,]),'statements':([50,52,58,67,68,69,74,78,83,86,89,],[57,60,66,71,72,73,77,81,85,87,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> statement','calc',1,'p_calc','rough.py',106),
  ('statement -> expression','statement',1,'p_statement','rough.py',116),
  ('statement -> conditions','statement',1,'p_statement','rough.py',117),
  ('statement -> loops','statement',1,'p_statement','rough.py',118),
  ('statement -> var_assign','statement',1,'p_statement','rough.py',119),
  ('loops -> WHILE expression COLON statements','loops',4,'p_while_np','rough.py',126),
  ('loops -> WHILE LPAREN expression RPAREN COLON statements','loops',6,'p_while_p','rough.py',131),
  ('loops -> FOR expression COLON','loops',3,'p_for','rough.py',138),
  ('statements -> statement','statements',1,'p_statements','rough.py',143),
  ('statements -> statement statements','statements',2,'p_statements','rough.py',144),
  ('conditions -> IF expression COLON statements','conditions',4,'p_if_np','rough.py',152),
  ('conditions -> IF LPAREN expression RPAREN COLON statements','conditions',6,'p_if_p','rough.py',158),
  ('conditions -> IF expression COLON statements ELSE COLON statements','conditions',7,'p_if_else_np','rough.py',163),
  ('conditions -> IF LPAREN expression RPAREN COLON statements ELSE COLON statements','conditions',9,'p_if_else_p','rough.py',169),
  ('conditions -> IF expression COLON statements ELIF expression COLON statements ELSE COLON statements','conditions',11,'p_if_elif_else_np','rough.py',175),
  ('conditions -> IF LPAREN expression RPAREN COLON statements ELIF LPAREN expression RPAREN COLON statements ELSE COLON statements','conditions',15,'p_if_elif_else_p','rough.py',181),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','rough.py',187),
  ('expression -> PRINTF LPAREN expressions RPAREN SEMICOLON','expression',5,'p_print_expression','rough.py',192),
  ('expressions -> expression','expressions',1,'p_print_expressions','rough.py',197),
  ('expressions -> expression COMMA expressions','expressions',3,'p_print_expressions','rough.py',198),
  ('expression -> expression PLUS expression','expression',3,'p_expression','rough.py',203),
  ('expression -> expression MINUS expression','expression',3,'p_expression','rough.py',204),
  ('expression -> expression TIMES expression','expression',3,'p_expression','rough.py',205),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','rough.py',206),
  ('expression -> expression MODULO expression','expression',3,'p_expression','rough.py',207),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','rough.py',208),
  ('expression -> expression NOTEQ expression','expression',3,'p_expression','rough.py',209),
  ('expression -> expression LARGE expression','expression',3,'p_expression','rough.py',210),
  ('expression -> expression SMALL expression','expression',3,'p_expression','rough.py',211),
  ('expression -> expression LRGEQ expression','expression',3,'p_expression','rough.py',212),
  ('expression -> expression SMLEQ expression','expression',3,'p_expression','rough.py',213),
  ('expression -> INT','expression',1,'p_expression_int_float','rough.py',221),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','rough.py',222),
  ('expression -> STRING','expression',1,'p_expression_int_float','rough.py',223),
  ('expression -> TRUE','expression',1,'p_expression_int_float','rough.py',224),
  ('expression -> FALSE','expression',1,'p_expression_int_float','rough.py',225),
  ('expression -> NAME','expression',1,'p_expression_var','rough.py',230),
]
